/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    ethers,
    EventFilter,
    Signer,
    BigNumber,
    BigNumberish,
    PopulatedTransaction,
    Contract,
    ContractTransaction,
    Overrides,
    CallOverrides,
  } from "ethers";
  import { BytesLike } from "@ethersproject/bytes";
  import { Listener, Provider } from "@ethersproject/providers";
  import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
  import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";
  
  export interface PosterInterface extends ethers.utils.Interface {
    functions: {
      "post(string,string)": FunctionFragment;
    };
  
    encodeFunctionData(
      functionFragment: "post",
      values: [string, string]
    ): string;
  
    decodeFunctionResult(functionFragment: "post", data: BytesLike): Result;
  
    events: {
      "NewPost(address,string,string)": EventFragment;
    };
  
    getEvent(nameOrSignatureOrTopic: "NewPost"): EventFragment;
  }
  
  export class Poster extends Contract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
  
    listeners<EventArgsArray extends Array<any>, EventArgsObject>(
      eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
    ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
    off<EventArgsArray extends Array<any>, EventArgsObject>(
      eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
      listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    on<EventArgsArray extends Array<any>, EventArgsObject>(
      eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
      listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    once<EventArgsArray extends Array<any>, EventArgsObject>(
      eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
      listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
      eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
      listener: TypedListener<EventArgsArray, EventArgsObject>
    ): this;
    removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
      eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
    ): this;
  
    listeners(eventName?: string): Array<Listener>;
    off(eventName: string, listener: Listener): this;
    on(eventName: string, listener: Listener): this;
    once(eventName: string, listener: Listener): this;
    removeListener(eventName: string, listener: Listener): this;
    removeAllListeners(eventName?: string): this;
  
    queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
      event: TypedEventFilter<EventArgsArray, EventArgsObject>,
      fromBlockOrBlockhash?: string | number | undefined,
      toBlock?: string | number | undefined
    ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;
  
    interface: PosterInterface;
  
    functions: {
      post(
        content: string,
        tag: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      "post(string,string)"(
        content: string,
        tag: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
    };
  
    post(
      content: string,
      tag: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    "post(string,string)"(
      content: string,
      tag: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    callStatic: {
      post(
        content: string,
        tag: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "post(string,string)"(
        content: string,
        tag: string,
        overrides?: CallOverrides
      ): Promise<void>;
    };
  
    filters: {
      NewPost(
        user: string | null,
        content: null,
        tag: string | null
      ): TypedEventFilter<
        [string, string, string],
        { user: string; content: string; tag: string }
      >;
    };
  
    estimateGas: {
      post(
        content: string,
        tag: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      "post(string,string)"(
        content: string,
        tag: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
    };
  
    populateTransaction: {
      post(
        content: string,
        tag: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      "post(string,string)"(
        content: string,
        tag: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
    };
  }