/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type TerminationClausesStruct = {
  atWillDays: PromiseOrValue<BigNumberish>;
  cureTimeDays: PromiseOrValue<BigNumberish>;
  legalCompulsion: PromiseOrValue<boolean>;
  moralTurpitude: PromiseOrValue<boolean>;
  bankruptcyDissolutionInsolvency: PromiseOrValue<boolean>;
  counterpartyMalfeasance: PromiseOrValue<boolean>;
  lostControlOfPrivateKeys: PromiseOrValue<boolean>;
};

export type TerminationClausesStructOutput = [
  number,
  number,
  boolean,
  boolean,
  boolean,
  boolean,
  boolean
] & {
  atWillDays: number;
  cureTimeDays: number;
  legalCompulsion: boolean;
  moralTurpitude: boolean;
  bankruptcyDissolutionInsolvency: boolean;
  counterpartyMalfeasance: boolean;
  lostControlOfPrivateKeys: boolean;
};

export interface AgreementArbitratorInterface extends utils.Interface {
  functions: {
    "agreeTo(uint256,address,address,string,uint32,address,uint256,(uint16,uint16,bool,bool,bool,bool,bool))": FunctionFragment;
    "getAgreementHash(address,uint256,address,address,string,uint32,address,uint256,(uint16,uint16,bool,bool,bool,bool,bool))": FunctionFragment;
    "sablier()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "agreeTo" | "getAgreementHash" | "sablier"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "agreeTo",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      TerminationClausesStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAgreementHash",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      TerminationClausesStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "sablier", values?: undefined): string;

  decodeFunctionResult(functionFragment: "agreeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAgreementHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sablier", data: BytesLike): Result;

  events: {
    "AgreementInitiated(uint256,address,address,address,uint256)": EventFragment;
    "AgreementProposed(bytes32,uint256,address,address,address,string,uint32,address,uint256,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AgreementInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgreementProposed"): EventFragment;
}

export interface AgreementInitiatedEventObject {
  agreementNonce: BigNumber;
  provider: string;
  client: string;
  contractooorAgreement: string;
  streamId: BigNumber;
}
export type AgreementInitiatedEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber],
  AgreementInitiatedEventObject
>;

export type AgreementInitiatedEventFilter =
  TypedEventFilter<AgreementInitiatedEvent>;

export interface AgreementProposedEventObject {
  agreementHash: string;
  agreementNonce: BigNumber;
  proposer: string;
  provider: string;
  client: string;
  contractURI: string;
  targetEndTimestamp: number;
  streamToken: string;
  totalStreamedTokens: BigNumber;
  terminationClauses: TerminationClausesStructOutput;
}
export type AgreementProposedEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    string,
    string,
    string,
    number,
    string,
    BigNumber,
    TerminationClausesStructOutput
  ],
  AgreementProposedEventObject
>;

export type AgreementProposedEventFilter =
  TypedEventFilter<AgreementProposedEvent>;

export interface AgreementArbitrator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AgreementArbitratorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    agreeTo(
      agreementNonce: PromiseOrValue<BigNumberish>,
      provider: PromiseOrValue<string>,
      client: PromiseOrValue<string>,
      contractURI: PromiseOrValue<string>,
      termLength: PromiseOrValue<BigNumberish>,
      streamToken: PromiseOrValue<string>,
      totalStreamedTokens: PromiseOrValue<BigNumberish>,
      terminationClauses: TerminationClausesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAgreementHash(
      signingParty: PromiseOrValue<string>,
      agreementNonce: PromiseOrValue<BigNumberish>,
      provider: PromiseOrValue<string>,
      client: PromiseOrValue<string>,
      contractURI: PromiseOrValue<string>,
      termLength: PromiseOrValue<BigNumberish>,
      streamToken: PromiseOrValue<string>,
      totalStreamedTokens: PromiseOrValue<BigNumberish>,
      terminationClauses: TerminationClausesStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    sablier(overrides?: CallOverrides): Promise<[string]>;
  };

  agreeTo(
    agreementNonce: PromiseOrValue<BigNumberish>,
    provider: PromiseOrValue<string>,
    client: PromiseOrValue<string>,
    contractURI: PromiseOrValue<string>,
    termLength: PromiseOrValue<BigNumberish>,
    streamToken: PromiseOrValue<string>,
    totalStreamedTokens: PromiseOrValue<BigNumberish>,
    terminationClauses: TerminationClausesStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAgreementHash(
    signingParty: PromiseOrValue<string>,
    agreementNonce: PromiseOrValue<BigNumberish>,
    provider: PromiseOrValue<string>,
    client: PromiseOrValue<string>,
    contractURI: PromiseOrValue<string>,
    termLength: PromiseOrValue<BigNumberish>,
    streamToken: PromiseOrValue<string>,
    totalStreamedTokens: PromiseOrValue<BigNumberish>,
    terminationClauses: TerminationClausesStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  sablier(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    agreeTo(
      agreementNonce: PromiseOrValue<BigNumberish>,
      provider: PromiseOrValue<string>,
      client: PromiseOrValue<string>,
      contractURI: PromiseOrValue<string>,
      termLength: PromiseOrValue<BigNumberish>,
      streamToken: PromiseOrValue<string>,
      totalStreamedTokens: PromiseOrValue<BigNumberish>,
      terminationClauses: TerminationClausesStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getAgreementHash(
      signingParty: PromiseOrValue<string>,
      agreementNonce: PromiseOrValue<BigNumberish>,
      provider: PromiseOrValue<string>,
      client: PromiseOrValue<string>,
      contractURI: PromiseOrValue<string>,
      termLength: PromiseOrValue<BigNumberish>,
      streamToken: PromiseOrValue<string>,
      totalStreamedTokens: PromiseOrValue<BigNumberish>,
      terminationClauses: TerminationClausesStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    sablier(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AgreementInitiated(uint256,address,address,address,uint256)"(
      agreementNonce?: null,
      provider?: PromiseOrValue<string> | null,
      client?: PromiseOrValue<string> | null,
      contractooorAgreement?: null,
      streamId?: null
    ): AgreementInitiatedEventFilter;
    AgreementInitiated(
      agreementNonce?: null,
      provider?: PromiseOrValue<string> | null,
      client?: PromiseOrValue<string> | null,
      contractooorAgreement?: null,
      streamId?: null
    ): AgreementInitiatedEventFilter;

    "AgreementProposed(bytes32,uint256,address,address,address,string,uint32,address,uint256,tuple)"(
      agreementHash?: PromiseOrValue<BytesLike> | null,
      agreementNonce?: null,
      proposer?: null,
      provider?: PromiseOrValue<string> | null,
      client?: PromiseOrValue<string> | null,
      contractURI?: null,
      targetEndTimestamp?: null,
      streamToken?: null,
      totalStreamedTokens?: null,
      terminationClauses?: null
    ): AgreementProposedEventFilter;
    AgreementProposed(
      agreementHash?: PromiseOrValue<BytesLike> | null,
      agreementNonce?: null,
      proposer?: null,
      provider?: PromiseOrValue<string> | null,
      client?: PromiseOrValue<string> | null,
      contractURI?: null,
      targetEndTimestamp?: null,
      streamToken?: null,
      totalStreamedTokens?: null,
      terminationClauses?: null
    ): AgreementProposedEventFilter;
  };

  estimateGas: {
    agreeTo(
      agreementNonce: PromiseOrValue<BigNumberish>,
      provider: PromiseOrValue<string>,
      client: PromiseOrValue<string>,
      contractURI: PromiseOrValue<string>,
      termLength: PromiseOrValue<BigNumberish>,
      streamToken: PromiseOrValue<string>,
      totalStreamedTokens: PromiseOrValue<BigNumberish>,
      terminationClauses: TerminationClausesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAgreementHash(
      signingParty: PromiseOrValue<string>,
      agreementNonce: PromiseOrValue<BigNumberish>,
      provider: PromiseOrValue<string>,
      client: PromiseOrValue<string>,
      contractURI: PromiseOrValue<string>,
      termLength: PromiseOrValue<BigNumberish>,
      streamToken: PromiseOrValue<string>,
      totalStreamedTokens: PromiseOrValue<BigNumberish>,
      terminationClauses: TerminationClausesStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sablier(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    agreeTo(
      agreementNonce: PromiseOrValue<BigNumberish>,
      provider: PromiseOrValue<string>,
      client: PromiseOrValue<string>,
      contractURI: PromiseOrValue<string>,
      termLength: PromiseOrValue<BigNumberish>,
      streamToken: PromiseOrValue<string>,
      totalStreamedTokens: PromiseOrValue<BigNumberish>,
      terminationClauses: TerminationClausesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAgreementHash(
      signingParty: PromiseOrValue<string>,
      agreementNonce: PromiseOrValue<BigNumberish>,
      provider: PromiseOrValue<string>,
      client: PromiseOrValue<string>,
      contractURI: PromiseOrValue<string>,
      termLength: PromiseOrValue<BigNumberish>,
      streamToken: PromiseOrValue<string>,
      totalStreamedTokens: PromiseOrValue<BigNumberish>,
      terminationClauses: TerminationClausesStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sablier(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
