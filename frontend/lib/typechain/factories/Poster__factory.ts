/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';

import type { Poster } from '../Poster';

const _abi = [
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'address',
                name: 'user',
                type: 'address',
            },
            {
                indexed: false,
                internalType: 'string',
                name: 'content',
                type: 'string',
            },
            {
                indexed: true,
                internalType: 'string',
                name: 'tag',
                type: 'string',
            },
        ],
        name: 'NewPost',
        type: 'event',
    },
    {
        inputs: [
            {
                internalType: 'string',
                name: 'content',
                type: 'string',
            },
            {
                internalType: 'string',
                name: 'tag',
                type: 'string',
            },
        ],
        name: 'post',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
];

export class Poster__factory extends ContractFactory {
    constructor(signer?: Signer) {
        super(_abi, _bytecode, signer);
    }

    deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<Poster> {
        return super.deploy(overrides || {}) as Promise<Poster>;
    }
    getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address: string): Poster {
        return super.attach(address) as Poster;
    }
    connect(signer: Signer): Poster__factory {
        return super.connect(signer) as Poster__factory;
    }
    static connect(address: string, signerOrProvider: Signer | Provider): Poster {
        return new Contract(address, _abi, signerOrProvider) as Poster;
    }
    static readonly abi = _abi;
}

const _bytecode =
    '0x608060405234801561001057600080fd5b506101f6806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80630ae1b13d14610030575b600080fd5b61004361003e3660046100fa565b610045565b005b8181604051610055929190610163565b60405180910390203373ffffffffffffffffffffffffffffffffffffffff167f6c7f3182d7e4cb876251f9ae1489975fdbbf15d9f35d393f2ac9b1ff57cec69f86866040516100a5929190610173565b60405180910390a350505050565b60008083601f8401126100c4578182fd5b50813567ffffffffffffffff8111156100db578182fd5b6020830191508360208285010111156100f357600080fd5b9250929050565b6000806000806040858703121561010f578384fd5b843567ffffffffffffffff80821115610126578586fd5b610132888389016100b3565b9096509450602087013591508082111561014a578384fd5b50610157878288016100b3565b95989497509550505050565b6000828483379101908152919050565b60006020825282602083015282846040840137818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010191905056fea2646970667358221220ee0377bd266748c5dbaf0a3f15ebd97be153932f2d14d460d9dd4271fee541b564736f6c63430008000033';
